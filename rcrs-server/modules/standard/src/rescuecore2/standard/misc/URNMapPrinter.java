package rescuecore2.standard.misc;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;

import org.json.JSONObject;

import rescuecore2.config.Config;
import rescuecore2.config.ConfigException;
import rescuecore2.messages.control.ControlMessageComponentFactory;
import rescuecore2.messages.control.ControlMessageFactory;
import rescuecore2.misc.CommandLineOptions;
import rescuecore2.misc.Pair;
import rescuecore2.registry.Factory;
import rescuecore2.standard.entities.StandardEntityFactory;
import rescuecore2.standard.entities.StandardPropertyFactory;
import rescuecore2.standard.messages.StandardMessageComponentFactory;
import rescuecore2.standard.messages.StandardMessageFactory;

public class URNMapPrinter {

	public static void main(String[] args) throws IOException, ConfigException {

		if ((args.length > 1) && (args[1].equals("--help"))) {
			System.out.println(
					"URNMapPrinter --python_out=file --js_out=file --json_out=file");
		}

		Config config = new Config();
		CommandLineOptions.processArgs(args, config);

		JSONObject json = toJSON();
		ArrayList<Pair<String, ArrayList<Pair<String, Integer>>>> entry = toEntry();
		write2file(config.getValue("json_out", "rcrs_urn.json"),
				json.toString());
		write2file(config.getValue("python_out", "rcrs_urn.py"),
				toPython(entry));
		write2file(config.getValue("js_out", "rcrs_urn.js"), toJS(entry));
	}

	private static void write2file(String path, String content)
			throws FileNotFoundException {
		try (PrintStream out = new PrintStream(new FileOutputStream(path))) {
			out.print(content);
			out.close();
		}
	}

	private static String toPython(
			ArrayList<Pair<String, ArrayList<Pair<String, Integer>>>> entries) {
		String out = "#AutoGenerated by \'rcrs-server/scripts/platforms/compile.sh\'\n#Please do not modify it\n\n";
		out += "from enum import IntEnum\n";
		String map = "{int(u):u for u in ";
		for (Pair<String, ArrayList<Pair<String, Integer>>> entry : entries) {
			String key = entry.first();
			out += "\n\nclass " + key + "(IntEnum):\n";
			for (Pair<String, Integer> e : entry.second()) {
				String hex = Integer.toHexString(e.second());
				if (hex.length() < 4)
					hex = "0" + hex;
				out += "\t" + e.first() + " = 0x" + hex + "\n";
			}
			map += "list(" + key + ") +";
		}
		map = map.substring(0, map.length() - 1) + "}";
		out += "\n\nMAP=" + map;
		return out;
	}

	public static String toPython(JSONObject json) {
		String out = "#AutoGenerated by \'rcrs-server/scripts/platforms/compile.sh\'\n#Please do not modify it\n\n";
		out += "from enum import IntEnum\n";
		String map = "{int(u):u for u in ";
		for (String key : json.keySet()) {
			out += "\n\nclass " + key + "(IntEnum):\n";
			JSONObject sub = ((JSONObject) json.get(key));
			for (String prettyName : sub.keySet()) {
				Integer urn = (int) sub.get(prettyName);
				out += "\t" + prettyName + " = 0x" + Integer.toHexString(urn)
						+ "\n";
			}
			map += "list(" + key + ") +";
		}
		map = map.substring(0, map.length() - 1) + "}";
		out += "\n\nMAP=" + map;
		return out;
	}

	private static String toJS(
			ArrayList<Pair<String, ArrayList<Pair<String, Integer>>>> entries) {
		String out = "//AutoGenerated by \'rcrs-server/scripts/platforms/compile.sh\'\n//Please do not modify it\n\n";

		String map = "Object.assign({},";
		for (Pair<String, ArrayList<Pair<String, Integer>>> entry : entries) {
			String key = entry.first();
			out += "\n\nconst " + key + "={\n";
			for (Pair<String, Integer> e : entry.second()) {
				String hex = Integer.toHexString(e.second());
				if (hex.length() < 4)
					hex = "0" + hex;
				out += "\t" + e.first() + ":0x" + hex + ",\n";
			}
			out += "}";
			map += "...Object.keys(" + key + ").map(p=>({[" + key
					+ "[p]]:p})),";
		}
		map = map.substring(0, map.length() - 1) + ")";
		out += "\n\nMAP=" + map;
		return out;
	}

	public static String toJS(JSONObject json) {
		String out = "//AutoGenerated by \'rcrs-server/scripts/platforms/compile.sh\'\n//Please do not modify it\n\n";

		out += "const URN={";

		String map = "Object.assign({},";
		for (String key : json.keySet()) {
			out += "\n\n " + key + ":{\n";
			JSONObject sub = ((JSONObject) json.get(key));
			for (String prettyName : sub.keySet()) {
				int urn = (int) sub.get(prettyName);
				out += "\t" + prettyName + ":0x" + Integer.toHexString(urn)
						+ ",\n";
			}
			out += "},";
			map += "...Object.keys(URN." + key + ").map(p=>({[URN." + key
					+ "[p]]:p})),";
		}
		map = map.substring(0, map.length() - 1) + ")";
		out += "\n}";
		out += "\n\nURN.MAP=" + map;
		return out;
	}

	public static JSONObject toJSON() {
		JSONObject json = new JSONObject();
		json.put("ControlMSG", buildJson(ControlMessageFactory.INSTANCE));
		json.put("ComponentControlMSG",
				buildJson(ControlMessageComponentFactory.INSTANCE));
		json.put("Command", buildJson(StandardMessageFactory.INSTANCE));
		json.put("ComponentCommand",
				buildJson(StandardMessageComponentFactory.INSTANCE));
		json.put("Entity", buildJson(StandardEntityFactory.INSTANCE));
		json.put("Property", buildJson(StandardPropertyFactory.INSTANCE));
		return json;
	}

	public static ArrayList<Pair<String, ArrayList<Pair<String, Integer>>>> toEntry() {
		ArrayList<Pair<String, ArrayList<Pair<String, Integer>>>> list = new ArrayList<>();
		list.add(new Pair<>("Entity",
				buildEntry(StandardEntityFactory.INSTANCE)));
		list.add(new Pair<>("Property",
				buildEntry(StandardPropertyFactory.INSTANCE)));
		list.add(new Pair<>("Command",
				buildEntry(StandardMessageFactory.INSTANCE)));
		list.add(new Pair<>("ComponentCommand",
				buildEntry(StandardMessageComponentFactory.INSTANCE)));
		list.add(new Pair<>("ControlMSG",
				buildEntry(ControlMessageFactory.INSTANCE)));
		list.add(new Pair<>("ComponentControlMSG",
				buildEntry(ControlMessageComponentFactory.INSTANCE)));
		return list;
	}

	private static ArrayList<Pair<String, Integer>> buildEntry(Factory fac) {
		ArrayList<Pair<String, Integer>> list = new ArrayList<>();
		int[] urns = fac.getKnownURNs();
		Arrays.sort(urns);
		for (Integer urn : urns) {
			String prettyName = fac.getPrettyName(urn);
			list.add(new Pair<>(prettyName, urn));
		}
		return list;
	}

	private static JSONObject buildJson(Factory fac) {
		JSONObject obj = new JSONObject();
		int[] urns = fac.getKnownURNs();
		Arrays.sort(urns);
		for (Integer urn : urns) {
			String prettyName = fac.getPrettyName(urn);
			obj.put(prettyName, urn);
		}
		return obj;
	}
}